.. _arch_overview_global_rate_limit:

全局速率限制
====================

尽管分布式 :ref:`断路 <arch_overview_circuit_break>` 通常在控制分布式系统中的吞吐量方面非常有效，但有时效果不是很好，需要全局速率限制。最常见的情况是当大量主机转发到少量主机并且平均请求延迟很短时（例如，到数据库服务器的连接/请求）。如果目标主机已备份，则下游主机将压垮上游群集。在这种情况下，很难在每个下游主机上配置足够严格的断路限制，使系统在平常的请求模式下可以正常运行，但在系统开始故障时仍可以防止级联失败。对于这种情况，全局速率限制是一个很好的解决方案。

Envoy 直接与全局 gRPC 速率限制服务集成。尽管可以使用任何实现定义 RPC/IDL 协议的服务，但 Lyft 提供了 Go 编写的使用 Redis 后端的 `参考实现 <https://github.com/lyft/ratelimit>`_ 。Envoy 的速率限制具有以下功能：

* **网络级别速率限制过滤器**：Envoy 在安装了过滤器的 listener 上的每个新连接调用速率限制服务。该配置指定了要设置速率限制的特定域和描述符。最终会限制每秒经过 listener 连接的速率。:ref:`配置参考
  <config_network_filters_rate_limit>`。
* **HTTP 级别速率限制过滤器**：Envoy 在安装了过滤器且路由表指定应调用全局速率限制服务的 listener 上为每个新请求调用速率限制服务。可以限制对目标上游群集的所有请求以及从源群集到目标群集的所有请求。:ref:`配置参考 <config_http_filters_rate_limit>`。

速率限制服务 :ref:`配置 <config_rate_limit_service>`。

请注意，Envoy 还支持 :ref:`本地速率限制 <config_network_filters_local_rate_limit>`。本地速率限制可以与全局速率限制结合使用，以减少全局速率限制服务的负载。例如，本地令牌桶速率限制可以承受非常大的突发负载，否则可能会压垮全局速率限制服务。因此，速率限制分为两个阶段。在细粒度全局限制完成工作之前，由令牌桶限制执行初始粗粒度限制。
